pipeline{
    agent any
    tools{
        jdk 'jdk17'
        maven 'maven3'
    }

    environment{
        SCANNER_HOME=tool 'sonar-scanner'
    }

    stages{
        stage('Git checkout'){
            steps{
                git branch : 'main', credentialsId: 'git-cred', url:'https://github.com/SaadOuzali/JavaApp-CI-CD.git'
            }
        }

        stage('compile'){
            steps{
                sh "mvn compile"
            }
        }

         stage('Unit Test'){
            steps{
                sh "mvn test"
            }
        }

         stage('sonar qube analysis'){
            steps{
               withSonarQubeEnv('sonar-server-cred'){
                sh '''
                 $SCANNER_HOME/bin/sonar-scanner \ 
                 -Dsonar.projectName=JavaApp-CI-CD \
                 -Dsonar.projectKey=JavaApp-CI-CD \
                 -Dsonar.java.binaries=.
                '''
               }
            }
        }

        stage('quality git'){
            steps{
                script{
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-cred'
                }
            }
        }

        stage('build '){
            steps{
                sh "mvn clean package"
            }
        }

        stage('publish to nexus'){
            steps{
                withMaven(globalMavenSettingsConfig:'global-settings',jdk:'jdk17',maven:'maven3',MavenSettingsConfig:'',traceability:true){
                    sh "mvn deploy"
                }
            }
        }

        stage('build and tag image'){
            steps{             
                 sh "docker build -t saad854/MyJavAppImage:latest ."           
            }
        }

        stage('scan image docker with trivy'){
            steps{
                sh "trivy image --format table -o trivy-image-report.html  saad854/MyJavAppImage:latest"
            }
        }

         stage('push image'){
            steps{
               script{
                    withDockerRegistry(redentialsId: 'docker-cred', toolName: 'docker'){
                        sh "docker push saad854/MyJavAppImage:latest"
                    }
               }    
            }
        }

        stage('deploy to kubernetes'){
            steps{
                withKubeConfig(caCertificate:'',clusterName:'kubernetes',contextName'',credentialsId:'k8s-cred',namespace:'webaaps',restrictKubeConfigAccess:false,serverUrl:'https://<api-server-ip>:6443'){
                    sh "kubectl apply -f deployementJavaAppK8S.yaml"
                }
            }
        }
    }
}